
generator client {
  provider = "prisma-client-js"
  engineType      = "library"
  previewFeatures = ["relationJoins"]
}

generator json {
  provider = "prisma-json-types-generator"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL") 
}

enum Roles {
  ADMIN
  CONTRIBUTOR
  SUPPORT
  READER
}

enum OrgType {
  DEMO
  TEST
  REAL
}

enum License {
  TRAIL
  PRO
  PREMIUM
  ENTERPRISE
  SUSPENDED
  CANCELED
}

enum LogStatus {
  CLOSED
  AUTO_CLOSE
  MANUAL_CLOSE
  PENDING
  MANUAL_CREATION
}

model User {
  id                String   @id 
  email             String   @unique
  phoneNumber       String?
  name              String?
  Roles             Role[]
  createdAt         DateTime @default(now())
  lastSignIn        DateTime @default(now())
  updatedAt         DateTime @updatedAt
  settings          Json @default("{}")
  /// [UserMeta]
  meta              Json @default("{}")
  isDeleted         Boolean  @default(false) 
}

model Address {
  id                String   @id @default(uuid())
  street            String
  houseNumber       String
  postalCode        String
  city              String
  country           String
  Organization      Organization?
  Company           Company?
  createdAt         DateTime @default(now())  
  updatedAt         DateTime @updatedAt
}

model Organization {
  id                String   @id @default(uuid())
  Roles             Role[]
  type              OrgType
  addressId         String? @unique 
  Address           Address? @relation(fields: [addressId], references: [id])
  name              String 
  taxNumber         String?
  Companies         Company[]
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  settings          Json     @default("{}")
  subscriptionStart DateTime?
  renewedAt         DateTime?
  nextRenewalAt     DateTime?
  trialEnd          DateTime?
  trailStart        DateTime?
  license           License?
  canceledAt        DateTime?
  canceledReason    String?
  isDeleted         Boolean  @default(false)
}

model Company {
  id                String   @id @default(uuid())
  name              String
  creatorId         String
  addressId         String? @unique
  Address           Address? @relation(fields: [addressId], references: [id])
  organizationId    String
  Organization      Organization @relation(fields: [organizationId], references: [id])
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  Disciplines       Discipline[]
  isDeleted         Boolean  @default(false)
  TimeRecords       TimeRecord[]
  Timepods          Timepod[]
  settings          Json     @default("{}")
  Cars              Car[]
  Employees         Employee[]
  Badges            Badge[]
  AutoClose         AutoClose[]
 }

model Role {
  role              Roles
  userId            String
  User              User @relation(fields: [userId], references: [id])
  organizationId    String
  Organization      Organization @relation(fields: [organizationId], references: [id])
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  @@unique([userId, organizationId])
}

model Discipline {
  id                String   @id @default(uuid())
  name              String
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt 
  color             String?
  cost              Int?
  companyId         String
  Company           Company @relation(fields: [companyId], references: [id])
  Employees         Employee[]
  @@unique([companyId, name])
}

model Car {
  id                String    @id @unique
  model             String
  make              String
  chassisNr         String?  
  owner             String?
  licensePlate      String
  active            Boolean
  companyId         String
  creatorId         String
  Company           Company   @relation(fields: [companyId], references: [id])
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  meta              Json      @default("{}")
  TimeRecords       TimeRecord[]
  timepodId         String?   @unique
  TimePod           Timepod?  @relation(fields: [timepodId], references: [id])
  isDeleted         Boolean   @default(false)

  @@unique([companyId, timepodId], name: "idx_company_timepod")
  @@index([active])
}

model TimeRecord {
  id              String   @id @default(uuid())
  BadgeUid        String
  Badge           Badge  @relation(fields: [BadgeUid], references: [uid])
  carId           String
  Car             Car      @relation(fields: [carId], references: [id])
  CompanyId       String
  Company         Company @relation(fields: [CompanyId], references: [id])
  discipline      String
  timepodId       String
  Timepod         Timepod  @relation(fields: [timepodId], references: [id])
  status          LogStatus?     
  badgeIn         DateTime
  badgeOut        DateTime?   
  employeeId      String
  Employee        Employee?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  isDeleted       Boolean  @default(false)

  @@map("TimeRecords")  
  @@index([badgeIn, badgeOut])
}

model Employee {
  id                String   @id @default(uuid())
  firstName         String
  lastName          String
  companyId         String
  Company           Company @relation(fields: [companyId], references: [id])
  defaultDiscId     String? @unique
  defaultDiscipline Discipline? @relation(fields: [defaultDiscId], references: [id])
  schedule          Json     @default("{}")
  latestRecordId    String? @unique
  latestTimeRecord  TimeRecord? @relation(fields: [latestRecordId], references: [id])
  badgeUid          String? @unique
  Badge             Badge? @relation(fields: [badgeUid], references: [uid])
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  settings          Json     @default("{}")
  autoClose         AutoClose[]
  hourlyRate        Int?
  isDeleted         Boolean  @default(false)

 }

model Badge {
  uid               String   @id
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  timepodId         String
  Timepod           Timepod @relation(fields: [timepodId], references: [id])
  employeeId        String?
  Employee          Employee?  
  TimeRecords       TimeRecord[]
  companyId         String
  Company           Company @relation(fields: [companyId], references: [id])
}
 
model AutoClose {
  id                String   @id @default(uuid())
  startTime         String   // HH:MM
  endTime           String   // HH:MM
  employeeId        String?
  Employee          Employee? @relation(fields: [employeeId], references: [id])
  companyId         String
  Company           Company @relation(fields: [companyId], references: [id])
}
 
 model Timepod {
  id                String   @id @unique
  IPAddress         String
  activeSince       DateTime
  bootCount         Int
  carId             String?   
  Car               Car?   
  companyId         String?
  Company           Company?   @relation(fields: [companyId], references: [id])
  Badges            Badge[]
  disciplines       String[]  
  failedRequests    Int
  firebaseClient    String
  gatewayIp         String
  hostname          String
  isActive          Boolean
  lastPingTime      DateTime
  macAddress        String
  networkId         String
  restarts          Int
  succeededRequests Int
  timepodNr         Int
  totalPings        Int
  wifiMac           String
  signalStrength    Int?      // optional, so it can be null
  TimeRecords       TimeRecord[]
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  @@map("timepods") 
  @@unique([carId, companyId])
  @@unique([timepodNr, companyId])
}

model TimeRecordRaw {
  id                String   @id @default(uuid())
  timepodId         String
  badgeUid          String
  status            String
  extra             Json     @default("{}")
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
}
